#!/bin/bash
set -e

export REPOSITORY_NAME="${REPOSITORY_NAME:-$(basename $(pwd))}"
export LC_ALL=en_US.UTF-8
# Speed up test runs by disabling slow syncs and mirror sorts
export SKIP_PORTAGE_SYNC="${SKIP_PORTAGE_SYNC:-0}"
export EQUO_MIRRORSORT="${EQUO_MIRRORSORT:-0}"
export CREATEREPO_PHASE=${CREATEREPO_PHASE:-true}
export SAB_WORKSPACE="${SAB_WORKSPACE:-$PWD}"
export SAB_ARCH="${SAB_ARCH:-intel}"
export MAKE_CONF="${MAKE_CONF:-}"
export LOCAL_OVERLAY="${LOCAL_OVERLAY:-$SAB_WORKSPACE/local_overlay}"
export SKIP_COMMIT="${SKIP_COMMIT:-0}"
export SKIP_PUSH="${SKIP_PUSH:-0}"
export REPO_RESET="${REPO_RESET:-0}"
export REPO_CLEAN_EXPIRE="${REPO_CLEAN_EXPIRE:-0}"
export REPO_CLEAN_EXPIRE_DAYS="${REPO_CLEAN_EXPIRE_DAYS:-1}"
# Clean obsolete packages .tgz under binhost directory
export REPO_BINHOST_CLEAN="${REPO_BINHOST_CLEAN:-0}"

export SAB_BUILDFILE=${SAB_BUILDFILE:-build.yaml}
export SAB_BUILDER=${SAB_BUILDER:-/usr/sbin/builder}

if [ -e "$SAB_WORKSPACE/specs/make.conf" ]; then
  echo "You specified a make.conf. I hope you know what are you doing"
  export MAKE_CONF="${MAKE_CONF:-$SAB_WORKSPACE/specs/make.conf}"
fi

. /sbin/sark-functions.sh

if [ ! -e ${SAB_BUILDFILE} ]; then
    echo "Must be run from a repository directory containing a ${SAB_BUILDFILE}"
    exit 1
fi

load_env_from_yaml ${SAB_BUILDFILE}

export OUTPUT_DIR="${SAB_WORKSPACE}/artifacts/${REPOSITORY_NAME}-binhost"
export CHECK_BUILD_DIFFS=${CHECK_BUILD_DIFFS:-1}

NEW_BINHOST_MD5=$(mktemp -t "$(basename $0).XXXXXXXXXX")
OLD_BINHOST_MD5=$(mktemp -t "$(basename $0).XXXXXXXXXX")

rm -rfv /usr/portage/packages/* || true

[ -d ${OUTPUT_DIR} ] || mkdir -p "${OUTPUT_DIR}"
[ "$CHECK_BUILD_DIFFS" -eq 1 ] && packages_hash ${SAB_WORKSPACE} $REPOSITORY_NAME $OLD_BINHOST_MD5

[ -z "$PORTAGE_CACHE" ] || [ -d "$PORTAGE_CACHE" ] && cp -rfv $PORTAGE_CACHE /usr/portage
[ -z "$DISTFILES" ] || [ -d "$PORTAGE_CACHE" ] && cp -rfv $DISTFILES /usr/portage/distfiles
[ -z "$ENTROPY_DOWNLOADED_PACKAGES" ] || [ -d "$ENTROPY_DOWNLOADED_PACKAGES" ] && cp -rfv $ENTROPY_DOWNLOADED_PACKAGES /var/lib/entropy/client/packages
[ -d "$LOCAL_OVERLAY" ] && cp -rfv $LOCAL_OVERLAY /usr/local/local_portage

PRE_SCRIPT_FILE=$(mktemp -t "$(basename $0).XXXXXXXXXX")
POST_SCRIPT_FILE=$(mktemp -t "$(basename $0).XXXXXXXXXX")

# Prepare and post script
[ -n "${PRE_SCRIPT_COMMANDS}" ] && \
  printf '%s\n' "${PRE_SCRIPT_COMMANDS[@]}" > $PRE_SCRIPT_FILE && \
  cp -rfv $PRE_SCRIPT_FILE /pre-script

[ -n "${POST_SCRIPT_COMMANDS}" ] && \
  printf '%s\n' "${POST_SCRIPT_COMMANDS[@]}" > $POST_SCRIPT_FILE && \
  cp -rfv $POST_SCRIPT_FILE /post-script

if [ -d "$SAB_WORKSPACE"/specs ]; then
  echo "Specs found"
  [ -e "$SAB_WORKSPACE"/specs/custom.mask ] && cp -rfv "$SAB_WORKSPACE/specs/custom.mask" "/opt/sabayon-build/conf/$SAB_ARCH/portage/package.mask/99-custom.mask"
  [ -e "$SAB_WORKSPACE"/specs/custom.unmask ] &&  cp -rfv "$SAB_WORKSPACE/specs/custom.unmask" "/opt/sabayon-build/conf/$SAB_ARCH/portage/package.unmask/99-custom.unmask"
  [ -e "$SAB_WORKSPACE"/specs/custom.use ] &&  cp -rfv "$SAB_WORKSPACE/specs/custom.use" "/opt/sabayon-build/conf/$SAB_ARCH/portage/package.use/99-custom.use"
  [ -e "$SAB_WORKSPACE"/specs/custom.env ] &&  cp -rfv "$SAB_WORKSPACE/specs/custom.env" "/opt/sabayon-build/conf/$SAB_ARCH/portage/package.env"
  [ -e "$SAB_WORKSPACE"/specs/custom.keywords ] &&  cp -rfv "$SAB_WORKSPACE/specs/custom.keywords" "/opt/sabayon-build/conf/$SAB_ARCH/portage/package.keywords/99-custom.keywords"
  [ -d "$SAB_WORKSPACE"/specs/env ] &&  cp -rfv "$SAB_WORKSPACE/specs/env/" "/opt/sabayon-build/conf/$SAB_ARCH/portage/env/"
fi

# Debug what env vars are being passed to the builder
printenv | sort

ENTROPY_DIR="/${SAB_WORKSPACE}/artifacts/${REPOSITORY_NAME}"

cat >/etc/entropy/server.conf <<EOF
# expiration-days = <internal value>
community-mode = enable
weak-package-files = disable
database-format = bz2
# sync-speed-limit =
# server-basic-languages = en_US C
# disabled-eapis = 1,2
# expiration-based-scope = disable
# nonfree-packages-directory-support = disable
rss-feed = enable
changelog = enable
rss-name = packages.rss
rss-base-url = http://packages.sabayon.org/?quicksearch=
rss-website-url = http://www.sabayon.org/
max-rss-entries = 10000
# max-rss-light-entries = 100
rss-light-name = updates.rss
managing-editor =
broken-reverse-deps = disable
default-repository = $REPOSITORY_NAME
repository=$REPOSITORY_NAME|$REPOSITORY_DESCRIPTION|file:///${ENTROPY_DIR}
EOF

entropysrv=$(mktemp)
createrepo=$(mktemp)
TEMPDIR=$(mktemp -d)
export EDITOR=cat

pushd /
  /usr/bin/tini -s -- ${SAB_BUILDER} $BUILD_ARGS
popd
[ "$CREATEREPO_PHASE" = false ] && exit $?

rm -rf $PRE_SCRIPT_FILE
rm -rf $POST_SCRIPT_FILE
cp -R /usr/portage/packages/* ${OUTPUT_DIR} || true

# Checking diffs
if [ "$CHECK_BUILD_DIFFS" -eq 1 ]; then
  echo "*** Checking tbz2 diffs ***"
  # let's do the hash of the tbz2 without xpak data
  packages_hash ${SAB_WORKSPACE}  $REPOSITORY_NAME $NEW_BINHOST_MD5
  TO_INJECT=($(diff -ru $OLD_BINHOST_MD5 $NEW_BINHOST_MD5 | grep -v -e '^\+[\+]' | grep -e '^\+' | awk '{print $2}'))

  echo "INJECT RESULT = ${TO_INJECT[@]}"

  #if diffs are detected, regenerate the repository
  if diff -q $OLD_BINHOST_MD5 $NEW_BINHOST_MD5 >/dev/null ; then
    echo "No changes where detected, repository generation prevented"

    rm -rf $OLD_BINHOST_MD5 $NEW_BINHOST_MD5
    exit 0
  else
    TBZ2_DIR=${SAB_WORKSPACE}/artifacts/${REPOSITORY_NAME}-binhost
    echo "${TO_INJECT[@]} packages needs to be injected"
    for ((i=0; i<${#TO_INJECT[@]}; i++)) ; do
      echo "Copying ${TO_INJECT[$i]} to ${TEMPDIR}..."
      cp -rf "${TBZ2_DIR}"/${TO_INJECT[$i]} ${TEMPDIR}/
    done
  fi
fi

mkdir -p ${ENTROPY_DIR}

built_pkgs=$(find $TEMPDIR -name "*.tbz2" | xargs)
[[ -z "${built_pkgs}" ]] && echo "ERROR: no tbz2s found" && exit 2
if [ -d "${ENTROPY_DIR}/standard" ]; then

  if [[ $SKIP_PULL = 0 ]] ; then
    echo "=== Repository already exists, syncronizing ==="
    eit unlock $REPOSITORY_NAME || true
    eit pull --quick $REPOSITORY_NAME || true
  fi
#  #eit sync \$repo
else
  echo "=== Repository is empty, intializing ==="
  echo "Yes" | eit init --quick $REPOSITORY_NAME
  eit push --quick --force ${REPOSITORY_NAME}
fi

echo "=== Update config files ==="
echo -9 | equo conf update

if [[ ${REPO_RESET} = 1 ]] ; then
  # This is needed 
  echo "=== Reset Repository Revision ==="
  eit reset --quick --local ${REPOSITORY_NAME}
  echo "=== Reset COMPLETED ==="
fi

[ -f "${SAB_WORKSPACE}/confs/${REPOSITORY_NAME}.pub" ] && [ -f "${SAB_WORKSPACE}/confs/${REPOSITORY_NAME}.key" ] && { ! eit key status ${REPOSITORY_NAME}; } && \
eit key import ${REPOSITORY_NAME} ${SAB_WORKSPACE}/confs/${REPOSITORY_NAME}.key ${SAB_WORKSPACE}/confs/${REPOSITORY_NAME}.pub && { eit key sign ${REPOSITORY_NAME} || true; } && { echo "=== Repository key imported successfully ==="; }
echo "=== Injecting packages ==="
echo "INJECT = ${built_pkgs}"
eit inject --to ${REPOSITORY_NAME} --quick ${built_pkgs} || { echo "ouch unable to inject" && exit 3; }

echo "=== Inject COMPLETED ====="
if [[ ${SKIP_COMMIT} = 0 ]] ; then
  echo "=== Commit packages ====="
  eit commit --quick
  echo "=== Commit COMPLETED ====="
fi
echo "=== Pushing built packages locally ==="
eit push --quick --force ${REPOSITORY_NAME}
[ -f "${SAB_WORKSPACE}/confs/${REPOSITORY_NAME}.pub" ] && [ -f "${SAB_WORKSPACE}/confs/${REPOSITORY_NAME}.key" ] && rm -rf /etc/entropy/gpg-keys

if [[ ${REPO_CLEAN_EXPIRE} = 1 ]] ; then
  echo "=== Clean expire packages ==="
  eit vacuum --quick --days ${REPO_CLEAN_EXPIRE_DAYS} ${REPOSITORY_NAME}
fi

if [[ ${REPO_BINHOST_CLEAN} = 1 ]] ; then
  purge_binhost_packages ${OUTPUT_DIR}
fi

VAGRANT_DIR=$SAB_WORKSPACE generate_repository_metadata

echo "=== ALL DONE. bye ==="
